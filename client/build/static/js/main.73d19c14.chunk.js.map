{"version":3,"sources":["Job.js","JobModal.js","Jobs.js","App.js","serviceWorker.js","index.js"],"names":["getMDY","ts","toDateString","split","slice","join","Job","job","onClick","Paper","className","Typography","variant","title","company","location","timestamp","dateStr","Date","todayStr","yesterdayStr","now","makeDate","created_at","Transition","React","forwardRef","props","ref","Slide","direction","JobModal","open","handleClose","Dialog","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","id","src","company_logo","alt","DialogContent","DialogContentText","Chip","size","label","source","dangerouslySetInnerHTML","__html","description","DialogActions","Button","color","href","url","target","rel","Jobs","jobs","useEffect","welcomeItem","document","querySelectorAll","delay","forEach","item","setTimeout","style","opacity","useState","setOpen","selectedJob","selectJob","numJobs","length","numPages","Math","ceil","activeStep","setActiveStep","jobsOnPage","scrollToTop","c","documentElement","scrollTop","body","window","requestAnimationFrame","scrollTo","component","map","i","key","console","log","MobileStepper","steps","position","nextButton","prevActiveStep","disabled","backButton","updateCb","a","fetch","res","json","App","jobList","updateJobs","fetchJobs","params","particles","number","value","density","enable","value_area","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.73d19c14.chunk.js","sourcesContent":["import React from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { Typography } from \"@material-ui/core\";\n\n// todo factor these into constants file\nconst ONE_DAY_MS = 24 * 3600 * 1000;\n\n// returns a date like Fri Jun 14\nfunction getMDY(ts) {\n  return ts.toDateString().split(\" \").slice(0, 3).join(\" \");\n}\n\n// makeDate takes a TS and returns a date like Fri Jun 14\n// if it's today or yesterday, it returns that instead\nfunction makeDate(timestamp) {\n  const date = new Date(timestamp);\n  const dateStr = getMDY(date);\n  const todayStr = getMDY(new Date());\n  const yesterdayStr = getMDY(new Date(Date.now() - ONE_DAY_MS));\n  if (dateStr === todayStr) {\n    return \"today\";\n  } else if (dateStr === yesterdayStr) {\n    return \"yesterday\";\n  } else {\n    return dateStr;\n  }\n}\n\nexport default function Job({ job, onClick }) {\n  return (\n    <Paper onClick={onClick} className=\"job\">\n      <div className=\"flex-align-mid\">\n        <div className=\"job-title-location\">\n          <Typography variant=\"h6\">{job.title}</Typography>\n          <Typography variant=\"h5\">{job.company}</Typography>\n          <Typography>{job.location}</Typography>\n        </div>\n      </div>\n      <div className=\"flex-align-mid\">\n        <Typography>{makeDate(job.created_at)}</Typography>\n      </div>\n    </Paper>\n  );\n}","import React from \"react\";\n\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Slide from \"@material-ui/core/Slide\";\nimport Chip from \"@material-ui/core/Chip\";\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function JobModal({ job, open, handleClose }) {\n  if (!job.title) {\n    return <div />;\n  }\n\n  return (\n    <div>\n      <Dialog\n        open={open}\n        TransitionComponent={Transition}\n        keepMounted\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-slide-title\"\n        aria-describedby=\"alert-dialog-slide-description\"\n      >\n        <DialogTitle id=\"alert-dialog-slide-title\">\n          {job.title} -{job.company}\n          <img className={\"detail-logo\"} src={job.company_logo} alt='logo'/>\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-slide-description\">\n            <Chip size=\"small\" label={`from ${job.source}`} />\n          </DialogContentText>\n          <DialogContentText\n            id=\"alert-dialog-slide-description\"\n            dangerouslySetInnerHTML={{ __html: job.description }}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Close\n          </Button>\n          <a href={job.url} target=\"_blank\" rel=\"noopener noreferrer\">\n            <Button color=\"primary\">Apply</Button>\n          </a>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}","\nimport React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Job from \"./Job\";\nimport JobModal from \"./JobModal\";\nimport MobileStepper from \"@material-ui/core/MobileStepper\";\nimport Button from \"@material-ui/core/Button\";\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\n\nexport default function Jobs({ jobs }) {\n  React.useEffect(() => {\n    const welcomeItem = document.querySelectorAll(\".welcome-item\");\n    let delay = 0;\n    welcomeItem.forEach((item) => {\n      setTimeout(() => (item.style.opacity = 1), delay);\n      delay += 500;\n    });\n  }, []);\n\n  // modal\n  const [open, setOpen] = React.useState(false);\n  const [selectedJob, selectJob] = React.useState({});\n  function handleClickOpen() {\n    setOpen(true);\n  }\n  function handleClose() {\n    setOpen(false);\n  }\n  // pagination\n  const numJobs = jobs.length;\n  const numPages = Math.ceil(numJobs / 50);\n  const [activeStep, setActiveStep] = React.useState(0);\n  const jobsOnPage = jobs.slice(activeStep * 50, activeStep * 50 + 50);\n\n  // step == 0, show 0-49\n  // step == 1, show 50 - 99\n\n  function scrollToTop() {\n    const c = document.documentElement.scrollTop || document.body.scrollTop;\n    if (c > 0) {\n      window.requestAnimationFrame(scrollToTop);\n      window.scrollTo(0, c - c / 8);\n    }\n  }\n\n  function handleNext() {\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    scrollToTop();\n  }\n\n  function handleBack() {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    scrollToTop();\n  }\n\n  return (\n    <div className=\"jobs\">\n      <JobModal open={open} job={selectedJob} handleClose={handleClose} />\n      <Typography variant=\"h4\" component=\"h1\">\n        Entry Level Tech Jobs\n      </Typography>\n      <Typography variant=\"h6\" component=\"h2\">\n        Found {numJobs} Jobs\n      </Typography>\n      {jobsOnPage.map((job, i) => (\n        <Job\n          key={i}\n          job={job}\n          onClick={() => {\n            console.log(\"clicked\");\n            handleClickOpen();\n            selectJob(job);\n          }}\n        />\n      ))}\n      <div>\n        Page {activeStep + 1} of {numPages}\n      </div>\n      <MobileStepper\n        variant=\"progress\"\n        steps={numPages}\n        position=\"static\"\n        activeStep={activeStep}\n        nextButton={\n          <Button\n            size=\"small\"\n            onClick={handleNext}\n            disabled={activeStep === numPages - 1}\n          >\n            Next\n            <KeyboardArrowRight />\n          </Button>\n        }\n        backButton={\n          <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\n            <KeyboardArrowLeft />\n            Back\n          </Button>\n        }\n      />\n    </div>\n  );\n}","import React from 'react';\nimport Particles from \"react-particles-js\"; \nimport './App.css';\nimport Jobs from './Jobs';\n\nconst JOB_API_URL = \"/api/jobs\";\n\nasync function fetchJobs(updateCb) {\n  const res = await fetch(JOB_API_URL);\n  const json = await res.json();\n  updateCb(json); \n}\n\nfunction App() {\n\n  const [jobList, updateJobs] = React.useState([]); \n\nReact.useEffect(() => {\n  fetchJobs(updateJobs);\n}, [])\n\n  return (\n    <div className=\"App\">\n      <Particles \n      className='particles' \n        params={{\n          particles: {\n            number: {\n              value: 200,\n              density: {\n                enable: true,\n                value_area: 1000,\n              },\n            },\n          },\n        }}\n      />\n      <Jobs jobs={jobList} />\n    </div>\n  );\n}\n\nexport default App;\n","// // This optional code is used to register a service worker.\n// // register() is not called by default.\n\n// // This lets the app load faster on subsequent visits in production, and gives\n// // it offline capabilities. However, it also means that developers (and users)\n// // will only see deployed updates on subsequent visits to a page, after all the\n// // existing tabs open on the page have been closed, since previously cached\n// // resources are updated in the background.\n\n// // To learn more about the benefits of this model and instructions on how to\n// // opt-in, read https://bit.ly/CRA-PWA\n\n// const isLocalhost = Boolean(\n//   window.location.hostname === 'localhost' ||\n//     // [::1] is the IPv6 localhost address.\n//     window.location.hostname === '[::1]' ||\n//     // 127.0.0.0/8 are considered localhost for IPv4.\n//     window.location.hostname.match(\n//       /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n//     )\n// );\n\n// export function register(config) {\n//   if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n//     // The URL constructor is available in all browsers that support SW.\n//     const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n//     if (publicUrl.origin !== window.location.origin) {\n//       // Our service worker won't work if PUBLIC_URL is on a different origin\n//       // from what our page is served on. This might happen if a CDN is used to\n//       // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n//       return;\n//     }\n\n//     window.addEventListener('load', () => {\n//       const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n//       if (isLocalhost) {\n//         // This is running on localhost. Let's check if a service worker still exists or not.\n//         checkValidServiceWorker(swUrl, config);\n\n//         // Add some additional logging to localhost, pointing developers to the\n//         // service worker/PWA documentation.\n//         navigator.serviceWorker.ready.then(() => {\n//           console.log(\n//             'This web app is being served cache-first by a service ' +\n//               'worker. To learn more, visit https://bit.ly/CRA-PWA'\n//           );\n//         });\n//       } else {\n//         // Is not localhost. Just register service worker\n//         registerValidSW(swUrl, config);\n//       }\n//     });\n//   }\n// }\n\n// function registerValidSW(swUrl, config) {\n//   navigator.serviceWorker\n//     .register(swUrl)\n//     .then(registration => {\n//       registration.onupdatefound = () => {\n//         const installingWorker = registration.installing;\n//         if (installingWorker == null) {\n//           return;\n//         }\n//         installingWorker.onstatechange = () => {\n//           if (installingWorker.state === 'installed') {\n//             if (navigator.serviceWorker.controller) {\n//               // At this point, the updated precached content has been fetched,\n//               // but the previous service worker will still serve the older\n//               // content until all client tabs are closed.\n//               console.log(\n//                 'New content is available and will be used when all ' +\n//                   'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n//               );\n\n//               // Execute callback\n//               if (config && config.onUpdate) {\n//                 config.onUpdate(registration);\n//               }\n//             } else {\n//               // At this point, everything has been precached.\n//               // It's the perfect time to display a\n//               // \"Content is cached for offline use.\" message.\n//               console.log('Content is cached for offline use.');\n\n//               // Execute callback\n//               if (config && config.onSuccess) {\n//                 config.onSuccess(registration);\n//               }\n//             }\n//           }\n//         };\n//       };\n//     })\n//     .catch(error => {\n//       console.error('Error during service worker registration:', error);\n//     });\n// }\n\n// function checkValidServiceWorker(swUrl, config) {\n//   // Check if the service worker can be found. If it can't reload the page.\n//   fetch(swUrl, {\n//     headers: { 'Service-Worker': 'script' },\n//   })\n//     .then(response => {\n//       // Ensure service worker exists, and that we really are getting a JS file.\n//       const contentType = response.headers.get('content-type');\n//       if (\n//         response.status === 404 ||\n//         (contentType != null && contentType.indexOf('javascript') === -1)\n//       ) {\n//         // No service worker found. Probably a different app. Reload the page.\n//         navigator.serviceWorker.ready.then(registration => {\n//           registration.unregister().then(() => {\n//             window.location.reload();\n//           });\n//         });\n//       } else {\n//         // Service worker found. Proceed as normal.\n//         registerValidSW(swUrl, config);\n//       }\n//     })\n//     .catch(() => {\n//       console.log(\n//         'No internet connection found. App is running in offline mode.'\n//       );\n//     });\n// }\n\n// export function unregister() {\n//   if ('serviceWorker' in navigator) {\n//     navigator.serviceWorker.ready\n//       .then(registration => {\n//         registration.unregister();\n//       })\n//       .catch(error => {\n//         console.error(error.message);\n//       });\n//   }\n// }\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}